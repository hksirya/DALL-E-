import {
  View,
  Text,
  SafeAreaView,
  Image,
  TouchableOpacity,
  ActivityIndicator,
  ScrollView,
  RefreshControl,
  TextInput,
} from "react-native";
import React, { useEffect, useState } from "react";

import FormField from "../components/FormField";
import Card from "../components/Card";

const RenderCard = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <Text className="p-4 text-xl font-semibold mt-40 mx-auto text-gray-400">
      {title}
    </Text>
  );
};

const Home = ({ navigation }) => {
  const [loading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [allPosts, setAllPosts] = useState(null);
  const [refreshing, setRefreshing] = useState(false);
  const [searchedResults, setSearchedResults] = useState("");

  const handleSearch = (e) => {
    setSearchText(e);

    setTimeout(() => {
      const searchResults = allPosts.filter(
        (item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
      );

      setSearchedResults(searchResults);
    }, 500);
  };

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch("http://192.168.29.26:8080/api/v1/post", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const result = await response.json();

        setAllPosts(result.data.reverse());
      }
    } catch (error) {
      alert(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const onRefresh = React.useCallback(() => {
    setRefreshing(true);
    fetchPosts();
    setTimeout(() => {
      setRefreshing(false);
    }, 2000);
  }, []);

  return (
    <SafeAreaView>
      <ScrollView
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        <View className="flex flex-row justify-between p-4 mt-4 fixed z-10">
          <Image
            className="w-40 h-10 object-contain"
            source={{
              uri: "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/OpenAI_Logo.svg/800px-OpenAI_Logo.svg.png?20221228112417",
            }}
          />
          <TouchableOpacity
            className="bg-green-500 p-3 px-4 text-base rounded-md"
            onPress={() => navigation.navigate("CreatePost")}
          >
            <Text className=" text-white text-[18px]">Create Post</Text>
          </TouchableOpacity>
        </View>

        <View className="p-4 mt-7 space-y-5">
          <Text className="text-2xl font-semibold ">
            The Community Showcase
          </Text>
          <Text className="text-base text-slate-600 ">
            Browse through a collection of imaginative and visually stunning
            images generated by DALL-E AI !
          </Text>
        </View>

        <View className="p-4">
          <TextInput
            onChangeText={handleSearch}
            placeholder="Search Posts"
            keyboardType="text"
            className="bg-gray-50 py-4 rounded-lg placeholder:p-4 border border-gray-300 focus:ring-[#4649ff] focus:border-[#4649ff] outline-none block "
          />
        </View>

        {loading ? (
          <View className="mt-8 items-center mx-auto justify-center">
            <ActivityIndicator size="small" color="black" />
          </View>
        ) : (
          <>
            {searchText && (
              <Text className="p-4 text-lg font-semibold">
                Showing Results for{" "}
                <Text className="text-blue-700">{searchText}</Text>
              </Text>
            )}
            <View className="grid grid-cols-1 xs:grid-cols-2 gap-2 p-2">
              {searchText ? (
                <RenderCard data={searchedResults} title="No Posts Found" />
              ) : (
                <RenderCard data={allPosts} title="No Posts found" />
              )}
            </View>
          </>
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

export default Home;
